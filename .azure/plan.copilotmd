# Azure Deployment Plan for loan-ai-portal Project

## **Goal**
Deploy the loan-ai-portal Next.js application to Azure Static Web Apps using AZD for infrastructure provisioning and deployment automation.

## **Project Information**

**Application**: loan-ai-portal
- **Technology Stack**: Next.js 14 with TypeScript and Tailwind CSS
- **Application Type**: Static web application with multi-language support (English/Spanish)
- **Containerization**: Not required - optimized for static hosting with `output: 'export'`
- **Dependencies**: No external dependencies (database, APIs, etc.) - pure frontend application
- **Hosting Recommendation**: Azure Static Web Apps for serverless static site hosting with global CDN

## **Azure Resources Architecture**
> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    A[GitHub Repository] --> B[GitHub Actions Workflow]
    B --> C[Azure Static Web Apps]
    C --> D[Global CDN]
    C --> E[Custom Domain Support]
    C --> F[SSL Certificate]
    
    G[User Request] --> D
    D --> H[Static Files Served]
    
    I[Multi-language Routes] --> C
    J[/en routes] --> C
    K[/es routes] --> C
```

**Data Flow**:
- GitHub Actions automatically builds and deploys the Next.js static export to Azure Static Web Apps
- Azure Static Web Apps serves the static files through a global CDN for optimal performance
- Multi-language routing is handled natively by Next.js App Router with static export
- SSL certificates and custom domains are managed automatically by Azure Static Web Apps

## **Recommended Azure Resources**

**Recommended App service hosting the project:**
- Application: loan-ai-portal
  - Hosting Service Type: Azure Static Web Apps
  - SKU: Standard (includes custom domains, private endpoints, and advanced features)
  - Configuration:
    - language: Node.js (for build process)
    - buildCommand: `npm run build`
    - outputLocation: `out`
    - appLocation: `/`
    - Environment Variables: []
  - Dependencies Resource: None (static application)

**Recommended Supporting Services:**
- Application Insights: Integrated with Static Web Apps for monitoring and analytics
- Log Analytics Workspace: Connected to Application Insights for centralized logging
- Key Vault: Not required (no secrets or connection strings needed)

**Recommended Security Configurations:**
- HTTPS enforcement: Enabled by default
- Custom domain support: Available with Standard SKU
- Authentication providers: GitHub, Azure AD (available but not currently implemented)
- Geographic restrictions: Can be configured if needed

## **Execution Steps**
> **Below are the steps for Copilot to follow; ask Copilot to update or execute this plan.**

1. **Provision Azure Infrastructure And Deploy the Application:**
    1. Based on following required Azure resources in plan, get the IaC rules from the tool `iac-rules-get`
    2. Generate IaC (bicep files) for required azure resources based on the plan.
    3. Pre-check: use `get_errors` tool to check generated Bicep grammar errors. Fix the errors if exist.
    4. Run the AZD command `azd up` to provision the resources and confirm each resource is created or already exists.
    5. Check the deployment output to ensure the resources are provisioned successfully.
    6. Check the application log with tool `azd-app-log-get` to ensure the services are running.

2. **Summary:**
    1. Summarize the deployment result and save to '.azure/summary.copilotmd'. It should list all changes deployment files and brief description of each file. Then have a diagram showing the provisioned azure resource.